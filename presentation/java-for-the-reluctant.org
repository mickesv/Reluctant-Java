

#+ATTR_ORG: :width 300
[[./Java-for-the-reluctant.png]]


* Getting Started: Hello World
** C++
#+BEGIN_SRC cpp
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
  cout << "Hello World" << endl;

  return 0;
}

#+END_SRC

#+RESULTS:
: Hello World
** Java
#+BEGIN_SRC java :classname HelloWorld
public class HelloWorld {
  public static void main(String [] args) {
    System.out.println("Hello World");
  }
}
#+END_SRC

#+RESULTS:
: Hello World
* Running Example: FizzBuzz
** Example output
1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16 
** Structure
- create class =FizzBuzzer=
  - constructor takes a map of fizzes and buzzes (number . callout)
  - default constructor ((3 . fizz) (5 . buzz))
  - =callNum(int theNumber)=
  - =list(start, end)=
  - =count(start, end)=

- class =Start=
  - =Start::main()=
* Classes and Objects
- Everything is in a class
- packages and import
- =main()= 
- constructors
- standard libraries
- =System.out.println()=
- arrays
- templates
- compilation: =javac=
* Using Objects
- calling methods
- java streams API (Requires Java 8)
- lambda expressions  (Requires Java 8)
- the importance of =static=
- calls /appear/ to work as normal.
* "Appear"?
- Everything is a pointer!

#+BEGIN_SRC java :classname AlmostNormal :results output
import msv.example.*;

public class AlmostNormal {
  public static void main(String[] args) {
    int x = 10;
    Callout c = new Callout(5, "Five");

    testMethod1(x, c);
    System.out.println("x is " + x + " and callout is " + c.getCallout());

    testMethod2(c);
    System.out.println("x is " + x + " and callout is " + c.getCallout());
  }

  public static void testMethod1(int theX, Callout theC) {
    theX = 20;
    theC.setCallout("Not Five");
  }

  public static void testMethod2(Callout theC) {
    theC = new Callout(30, "Thirty");
  }
}

#+END_SRC

#+RESULTS:
: x is 10 and callout is Not Five
: x is 10 and callout is Not Five
* Arrays
- declare an array =String[] myArray=
- create array =new String[10]=
#+BEGIN_SRC java
    Callout[] calls = new Callout[3];
    calls[0] = new Callout(5, "Fives");
    calls[1] = new Callout(10, "Tens");
    calls[2] = new Callout(12, "Twelves");
#+END_SRC
- growing array: =ArrayList=
  - cast to regular array =myArrayList.toArray(new ArrayType[1]);=
- method overloading
- for-each construct =for(Type var : array)=
* Inheritance
- Extends
- Implements
- =super=, =super.method()=  , =this.method()=
- =new String[]{"a", "b", "c"}=
- =String[] s = {"a", "b", "c"}=
- =@Override=
- lazy import: =import msv.example.*=
